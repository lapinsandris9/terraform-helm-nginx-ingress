
name: Check and udpate Ingress-Nginx Helm chart version

# on:
#   schedule:
#     - cron: '*/10 * * * *'

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - master

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Format Terraform scripts
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
    
    - name: Initialize Terraform
      id: init
      run: terraform init
    
    - name: Validate Terraform scripts
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true

    - name: Get latest Helm chart version from ArtifactHub
      id: get_latest_version
      run: |
        latest_version=$(curl -s https://artifacthub.io/api/v1/packages/helm/ingress-nginx/ingress-nginx | jq -r '.version')
        echo "Latest ingress-nginx version: $latest_version"
        echo "latest_version=$latest_version" >> $GITHUB_ENV

    - name: Update version in variables.tf if necessary
      id: compare_versions
      run: |
        terraform plan -out=tfplan
        terraform show -json tfplan > plan.json
        current_version=$(jq -r '.variables.nginx_ingress_chart_version.value' plan.json)
        latest_version="${{ env.latest_version }}"
        echo "Current version: $current_version"
        cat variables.tf | grep -A 4 -B 4 nginx_ingress_chart_version
        if [[ "$latest_version" != "$current_version" ]]; then
          echo "New version found, updating to $latest_version"
          sed -i "s/$current_version/$latest_version/" variables.tf
        else
          echo "Already up-to-date"
          exit 0 # Exit with success, stopping the workflow here
        fi
        cat variables.tf | grep -A 4 -B 4 nginx_ingress_chart_version

    - name: Get latest tag
      id: get_latest_tag
      run: |
        git fetch --tags
        latest_tag=$(git tag --sort=-v:refname | head -n 1)
        echo "Latest tag: $latest_tag"
        echo "latest_tag=$latest_tag" >> $GITHUB_ENV

    - name: Increment version
      id: increment_version
      run: |
        IFS='.' read -r major minor patch <<< "${{ env.latest_tag }}"
        new_patch=$((patch + 1))
        new_tag="$major.$minor.$new_patch"
        echo "New version: $new_tag"
        echo "new_tag=$new_tag" >> $GITHUB_ENV

    - name: Commit changes
      run: |
        git config --local user.name "GitHub Actions"
        git config --local user.email "actions@github.com"
        git add .
        git status
        git commit -m "Update module to nginx controller chart version - ${{ env.latest_version }}"

    - name: Tag the new version
      run: |
        git tag ${{ env.new_tag }}

    - name: Push changes and tags
      run: |
        git checkout cron-update
        git push --tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}